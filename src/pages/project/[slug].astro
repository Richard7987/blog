---
import client from "../../../tina/__generated__/client";
import BaseHead from "../../components/BaseHead.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import ColorScript from "../../components/ColorScript.astro";
import Tags from "../../components/Tags.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../../config";

export async function getStaticPaths() {
	try {
		const res = await client.queries.proyectosConnection();
		const proyectos = res.data.proyectosConnection.edges.map((edge) => edge.node);

		return proyectos.map((project) => ({
			params: { slug: project._sys.filename },
			props: {
				title: project.title || "Untitled Project",
				description: project.description || "",
				added: project.added,
				updated: project.updated,
				tags: project.tags || [],
				slug: project._sys.filename,
				body: project.body || ""
			}
		}));
	} catch (error) {
		console.error("Error in getStaticPaths:", error);
		return [];
	}
}

const { title, description, added, updated, tags, slug, body } = Astro.props;

// Formatear fechas
let formattedAdded = "";
let formattedUpdated = "";

if (added) {
	formattedAdded = new Date(added).toLocaleDateString("en-us", {
		year: "numeric",
		month: "short",
		day: "numeric",
	});
}

if (updated) {
	formattedUpdated = new Date(updated).toLocaleDateString("en-us", {
		year: "numeric",
		month: "short",
		day: "numeric",
	});
}

// Function to convert TinaCMS rich text to simple HTML
function convertBodyToHTML(body) {
	if (!body || !body.children) {
		return "";
	}
	
	let html = "";
	
	for (const node of body.children) {
		if (node.type === "p") {
			html += "<p>";
			if (node.children) {
				for (const child of node.children) {
					if (child.type === "text") {
						html += child.text || "";
					}
				}
			}
			html += "</p>";
		} else if (node.type === "h1") {
			html += "<h1>";
			if (node.children) {
				for (const child of node.children) {
					if (child.type === "text") {
						html += child.text || "";
					}
				}
			}
			html += "</h1>";
		} else if (node.type === "h2") {
			html += "<h2>";
			if (node.children) {
				for (const child of node.children) {
					if (child.type === "text") {
						html += child.text || "";
					}
				}
			}
			html += "</h2>";
		} else if (node.type === "h3") {
			html += "<h3>";
			if (node.children) {
				for (const child of node.children) {
					if (child.type === "text") {
						html += child.text || "";
					}
				}
			}
			html += "</h3>";
		} else if (node.type === "ul") {
			html += "<ul>";
			if (node.children) {
				for (const child of node.children) {
					if (child.type === "li") {
						html += "<li>";
						if (child.children) {
							for (const grandchild of child.children) {
								if (grandchild.type === "text") {
									html += grandchild.text || "";
								}
							}
						}
						html += "</li>";
					}
				}
			}
			html += "</ul>";
		}
	}
	
	return html;
}

const htmlContent = convertBodyToHTML(body);
---

<!doctype html>
<html lang="en-us">
	<BaseHead title={`${title} - ${SITE_TITLE}`} description={description} />
	<body>
		<Header />
		<main>
			<article>
				<h1 class="article-title">{title}</h1>
				{formattedUpdated ?
					<span><time>{formattedAdded}</time>, last updated on <time>{formattedUpdated}</time></span>
					:
					<span>{formattedAdded && <time>{formattedAdded}</time>}</span>
				}
				<Tags tags={tags} />
				<hr />
				<div class="blog-post">
					<Fragment set:html={htmlContent} />
				</div>
			</article>
		</main>
		<Footer />
		<ColorScript />
	</body>
</html>
